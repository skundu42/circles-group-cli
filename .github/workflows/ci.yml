name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Dependency security check
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
  # Build and test on multiple Node.js versions
  build:
    runs-on: ubuntu-latest
    needs: security
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run comprehensive CI checks
      run: npm run ci
      
    - name: Build project
      run: npm run build
      
    - name: Verify build output structure
      run: |
        echo "üîç Verifying build output..."
        
        # Check essential directories and files
        required_files=(
          "dist/index.js"
          "dist/index.d.ts"
          "dist/index.js.map"
          "dist/index.d.ts.map"
        )
        
        required_dirs=(
          "dist/commands"
          "dist/utils"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Required file not found: $file"
            exit 1
          fi
          echo "‚úÖ Found: $file"
        done
        
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "‚ùå Required directory not found: $dir"
            exit 1
          fi
          echo "‚úÖ Found: $dir"
        done
        
        # Check that commands directory has files
        if [ -z "$(ls -A dist/commands)" ]; then
          echo "‚ùå dist/commands directory is empty"
          exit 1
        fi
        
        # Check that utils directory has files
        if [ -z "$(ls -A dist/utils)" ]; then
          echo "‚ùå dist/utils directory is empty"
          exit 1
        fi
        
        echo "‚úÖ All build artifacts verified"
        
    - name: Test CLI functionality
      run: |
        echo "üß™ Testing CLI functionality..."
        
        # Test help command
        if ! node dist/index.js --help > /dev/null 2>&1; then
          echo "‚ùå CLI help command failed"
          exit 1
        fi
        echo "‚úÖ CLI help command works"
        
        # Test version command (if available)
        if node dist/index.js --version > /dev/null 2>&1; then
          echo "‚úÖ CLI version command works"
        else
          echo "‚ÑπÔ∏è  CLI version command not available (this is optional)"
        fi
        
    - name: Verify build quality
      run: |
        echo "üîç Verifying build quality..."
        
        # Check for empty files
        empty_files=$(find dist -name "*.js" -empty)
        if [ -n "$empty_files" ]; then
          echo "‚ùå Found empty JavaScript files:"
          echo "$empty_files"
          exit 1
        fi
        
        # Check that all JS files are valid (not just error messages)
        for js_file in $(find dist -name "*.js"); do
          # Skip if file is empty (already checked above)
          if [ ! -s "$js_file" ]; then
            continue
          fi
          
          # Check if file contains valid JavaScript structure
          if ! head -5 "$js_file" | grep -q "function\|const\|let\|var\|import\|export\|class"; then
            echo "‚ö†Ô∏è  Warning: $js_file may not contain valid JavaScript structure"
          fi
        done
        
        echo "‚úÖ Build quality verification passed"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: build-artifacts-node-${{ matrix.node-version }}
        path: dist/
        retention-days: 7
        
  # Final status check
  status:
    runs-on: ubuntu-latest
    needs: [security, build]
    if: always()
    steps:
    - name: Check job status
      run: |
        if [ "${{ needs.security.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "‚úÖ All checks passed!"
        else
          echo "‚ùå Some checks failed"
          exit 1
        fi
